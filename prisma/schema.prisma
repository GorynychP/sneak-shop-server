generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(cuid())

    email      String  @unique
    password   String
    name       String? @default("Не указана")
    avatarPath String  @default("") @map("avatar_path")
    phone      String? @default("Не указан")
    country    String? @default("Не указана")

    orders    Order[]
    favorites Product[]

    rights Role[] @default([USER])

    verificationToken String? @default(cuid()) @map("verification_token")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    review    Review[]

    @@map("user")
}

enum Role {
    USER
    PREMIUM
    MANAGER
    ADMIN
}

model Product {
    id String @id @default(cuid())

    title       String
    description String?
    price       Float
    discount    Float?   @default(0)
    images      String[]

    rating Float? @default(0)
    brand  String
    stock  Int    @default(0)
    gender Gender
    sizes  Size[] @relation("ProductSizes")
    color  String

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @map("user_id")

    orderItems OrderItem[]
    review     Review[]

    @@map("product")
}

model Review {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    text   String
    rating Int

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @map("user_id")

    product   Product? @relation(fields: [productId], references: [id])
    productId String?  @map("product_id")

    @@map("review")
}

enum Gender {
    MALE
    FEMALE
    UNISEX
}

model Size {
    id       Int       @id @default(autoincrement())
    size     Int
    products Product[] @relation("ProductSizes")
}

model Order {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    status EnumOrderStatus @default(PENDING)

    items OrderItem[]
    total Float

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @map("user_id")

    @@map("order")
}

model OrderItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    quantity Int
    price    Int

    order   Order?  @relation(fields: [orderId], references: [id])
    orderId String? @map("order_id")

    product   Product? @relation(fields: [productId], references: [id])
    productId String?  @map("product_id")

    @@map("order_item")
}

enum EnumOrderStatus {
    PENDING
    PAYED
}
